If you're reading this lesson, you are probably already familiar with GitHub.
However, for those who aren't and have found their way to this file by watching one
Pro Squad's YouTube videos, welcome to GitHub!

If you'd like to watch a video of the GitHub team explaining what exactly they think
GitHub is and how it should be used, here is a link to that video:
https://www.youtube.com/watch?v=w3jLJU7DT5E

I've used GitHub for years, and with all my experience with git and GitHub, I will
explain in my own words what I think they are.

To start with, it's important to understand that writing software is usually a very
collaborative experience. When code is first being written on the screen, often
this is done while pair-programming, something I can show off in a future video. After
that, code will most likely go through a code review, if it is written in a company,
it will definitely go through a code review. So how are these code reviews done?
We obviously don't just pass off the laptop to the code reviewer. No, we use git, and usually,
GitHub.

Git is what's called a version control system, a fancy programming term which basically means that
when you use git correctly, you can use it to keep track of changes with your code. At first
glance, this may seem arbitrary. But imagine you have a persistent bug in your code. You've spent
hours doing what you think "fixed" the bug. However, after spending those hours, you realize your were
closer to the solution when you started than now. That's perfectly fine, in fact, this happens often
in programming. So now you want to roll back all those various changes you made to the code accross
an entire file structure. That is not a simple ordeal, except with git it is. 

So let's jump into the fundamnetal commands in git. First we can go over how you can set up 
git on your computer. If you are using a windows computer, this part of the video is not for you.
You can go look up how to download git onto your computer. But I'm a mac user, so I'll be reviewing
how to get git on your mac computer. If you are using linux, let's be honest, you probably already 
know how to get it onto your computer, so you can skip this section too. 

One option, the easist way, is to install git with Homebrew. Homebrew simplifies the installation
of software on Mac OS X. If you'd like to learn more about how that is made possible of what
exactly Homebrew does, check out this wikipedia article:

https://en.wikipedia.org/wiki/Homebrew_(package_manager)

Copy and paste this command into your terminal, either Apple's terminal program or an intergrated
terminal your IDE of choice, such as VS Code, my preferred IDE.

$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" brew doctor

You will be offered to install the Command Line Developer Tools from Apple. Confirm by clicking Install. 
After the installation finished, continue installing Homebrew by hitting Return again.

After homebrew is installed all you have to do is enter the following command:

$ brew install git

Now that git has been installed on your computer, let's go ahead and create a GitHub account. Follow this linK:
https://github.com
And create an account. Make sure your password is secure! After creating your account, let's log into your
account on the terminal, telling git that you have a github account. To do so, enter the following on the terminal:

$ git config --global user.name "Your name here"
$ git config --global user.email "your email here"

Now you've told git what GitHub account you're using.

Now you have git installed on your computer, have registered for a GitHub account, and have signed in on your computer.
Great. Let's get to using it. Pick out the file structure you want to start your first git repository in. I would suggest, 
if you've watched my last video, you choose a subfolder within your Development folder on your desktop. 
Don't choose the outer Development file because you'll want to have separate repositories on GitHub of all of 
your different folders in that Development folder. 

Once you've chosen which will be best for you, go ahead and enter the command:

$ git init

This will set up an empty skeleton git repository in your file structure you've chosen to do so in.
Now, after setting up your inital git repo, I want you to do something that won't make a ton of sense at
first, but will help save you a lot of headache. Go ahead and create a file in the root of the directory
called ".gitignore". This file is going to tell git what NOT to put into the git repository you just
created. This would include files that hold keys, passwords, or any other sensitive information you
don't want anyone and everyone on the web to be able to find. If you have any files with keys or 
passwords in them, write the name of the file with the extension on its own line in that file.

After creating your .gitignore file, let's get to learning how to use git more comprehensively. so
the first command you'll learn to use after init will be to add files to what's sometimes referred
to as a staging area. Adding files is basically one step before committing to your changes and in effect
saving them to the git repo. Enter the following on the command line:

$ git add .

That period after add will tell git to add all of the files and files within subfolders in your
current directory. So make sure you're at the root of your directory that you'd like to add to github 
before entering this command.

Now you've decided that you are happy with what you've added to the staging area, so it's time to commit
your changes. Go ahead and enter the following command:

$ git commit -m "First commit"

You'll see that I used what's called a flag after the commit command, that is the message flag. It tells
git that the message in quatation marks will be the message associated with this commit. It will show on
GitHub, so I'd suggest just saying "First commit".

Congratulations! You've entered your first commit. But where are these changes being saved and where can you
look at them? Well that's a more complicated question than you think, but to answer it simply, we'd want
to upload this commit to GitHub to see it. So let's go back to GitHub in your browser. 

You'll want to create a remote repository. That's the repository on GitHub where your file structure on your
computer will live remotely. So go about creating a new Repo on GitHub and meet me back here. 

Once you've created this repo, you will take the link that they give you for pushing with HTTPS and enter it 
in with the following command on your terminal:

$ git remote add origin "the link goes here"

Replacing what's in the quatation marks with your link. Your link should be surrounded by quotes though.
Now git knows that for this repository, you want to push your code to that remote repository. So we'll
enter the following command:

$ git push origin master

You'll see it taking a little while, but before long, you can press refresh on your GitHub repo page and you
should see all of the files that you didn't ignore in your gitignore file! Congrats! You just pushed your
first code to GitHub. Other developers can now read your code and interact with it, even download it to their
computers. We'll go into all of this in more depth later on. 